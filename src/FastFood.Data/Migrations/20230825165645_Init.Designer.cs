// <auto-generated />
using System;
using FastFood.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastFood.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230825165645_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FastFood.Domain.Entities.Attachments.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Authorizations.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Authorizations.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 577, DateTimeKind.Utc).AddTicks(8159),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 577, DateTimeKind.Utc).AddTicks(8162),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 577, DateTimeKind.Utc).AddTicks(8165),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Driver"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 577, DateTimeKind.Utc).AddTicks(8166),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Picker"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 577, DateTimeKind.Utc).AddTicks(8167),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Packer"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Authorizations.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 10L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 11L
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Feedbacks.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Feedbacks.FeedbackAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackAttachments");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orderes");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.OrderAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ApproximateFinishTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAction");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Payments.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6462),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best Food",
                            IsDeleted = false,
                            Name = "Beef Longer",
                            Price = 26000m,
                            Weight = 180.0
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6464),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bigger burger",
                            IsDeleted = false,
                            Name = "Bigger",
                            Price = 25000m,
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6466),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cheese burger",
                            IsDeleted = false,
                            Name = "CHEESE BURGER",
                            Price = 29000m,
                            Weight = 190.0
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6467),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CHICKY BURGER",
                            IsDeleted = false,
                            Name = "CHICKY BURGER",
                            Price = 18000m,
                            Weight = 150.0
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6468),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "chicky burger,cola,soup,free",
                            IsDeleted = false,
                            Name = "CHICKY BURGER SET",
                            Price = 36000m,
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6470),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "long burger",
                            IsDeleted = false,
                            Name = "CHILI LONGER",
                            Price = 26000m,
                            Weight = 190.0
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6472),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Simple burger",
                            IsDeleted = false,
                            Name = "CLASSIC",
                            Price = 19000m,
                            Weight = 180.0
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6473),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "double burger",
                            IsDeleted = false,
                            Name = "DOUBLE CHEESE BURGER",
                            Price = 44000m,
                            Weight = 360.0
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6474),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HAMBURGER",
                            IsDeleted = false,
                            Name = "HAMBURGER",
                            Price = 26000m,
                            Weight = 190.0
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6475),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "short burger",
                            IsDeleted = false,
                            Name = "JUNIOR BURGER",
                            Price = 18000m,
                            Weight = 150.0
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6477),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "junior burger,cola,KFC,free",
                            IsDeleted = false,
                            Name = "JUNIOR BURGER SET",
                            Price = 33000m,
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6478),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "long burger",
                            IsDeleted = false,
                            Name = "Longer",
                            Price = 22000m,
                            Weight = 220.0
                        },
                        new
                        {
                            Id = 13L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6479),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "tasty burger",
                            IsDeleted = false,
                            Name = "ROAST BURGER",
                            Price = 27000m,
                            Weight = 200.0
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6400),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "APPETIZERS"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6410),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6411),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6413),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6415),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6415),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Kids Meal"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6416),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6417),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Spinner"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6418),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Salad & other"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 307, DateTimeKind.Utc).AddTicks(6420),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Combo"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Users.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Home")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 784, DateTimeKind.Utc).AddTicks(7342),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dotnetgo@icloud.com",
                            FirstName = "Mukhammadkarim",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Tukhtaboyev",
                            Password = "$2a$11$0B.Vdi05CXJsi0KUA9SOGuxJLv6WYLYkOuG2LiG8ORwJeikkwFHnK",
                            Phone = "+998 991239999",
                            RoleId = 2L,
                            UserName = "Mukhammadkarim"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 42, 979, DateTimeKind.Utc).AddTicks(1631),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wonderboy1w3@gmail.com",
                            FirstName = "Jamshid",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Ma'ruf",
                            Password = "$2a$11$mH8uUJw0wOilsrazs2v9cOENHqS4Sj2X8ImEt61TdnGJTQjGkO5dO",
                            Phone = "+998 991231999",
                            RoleId = 3L,
                            UserName = "Jamshid"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 43, 202, DateTimeKind.Utc).AddTicks(7246),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kabeersolutions@gmail.com",
                            FirstName = "Kabeer",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Solutions",
                            Password = "$2a$11$hgHRr5OpSGvTJbSPSTS1SOfWfFPW0kcNK644OWg4CWYxdnn/wJZVO",
                            Phone = "+998 991232999",
                            RoleId = 4L,
                            UserName = "Kabeer"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 43, 385, DateTimeKind.Utc).AddTicks(8800),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nurillaewmuzaffar@gmail.com",
                            FirstName = "Muzaffar",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Nurillayev",
                            Password = "$2a$11$Dtchc6CCFNx7U63nXFLnP.9Jr79khvfU.X8Rpqb4CNcckaa4V44z2",
                            Phone = "+998 995030110",
                            RoleId = 5L,
                            UserName = "Muzaffar"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 43, 614, DateTimeKind.Utc).AddTicks(889),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "azimochilov@icloud.com",
                            FirstName = "Azim",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Ochilov",
                            Password = "$2a$11$f9dBWn4bwVapTd5p9PiqM.JtY3cCF224NtonGN3aA2Uc3rGNFcDPS",
                            Phone = "+998 991233999",
                            RoleId = 1L,
                            UserName = "Azim"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 43, 934, DateTimeKind.Utc).AddTicks(9955),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abdulloh@icloud.com",
                            FirstName = "Abdulloh",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Ahmadjonov",
                            Password = "$2a$11$zG/jwREfQAQ89caAFSTLheOTu2cEO2TDzhLtVU7kK8Oy9QiuHNLPq",
                            Phone = "+998 991236999",
                            RoleId = 1L,
                            UserName = "Abdulloh"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 44, 127, DateTimeKind.Utc).AddTicks(6811),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "komron2052@gmail.com",
                            FirstName = "Komron",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Rahmonov",
                            Password = "$2a$11$vbX4vTHgXf9XekS1mOgsX.XL7DQ1vmgMZAMuVhieB4gObY/ccEPUK",
                            Phone = "+998 991234999",
                            RoleId = 4L,
                            UserName = "Komron"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 44, 408, DateTimeKind.Utc).AddTicks(8959),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nozimjon@gmail.com",
                            FirstName = "Nozimjon",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Usmonaliyev",
                            Password = "$2a$11$OHSWfqjJHlL2gy86KMWJrOd6zve98r2Q0vMuIunzG5fL9HgxJRkZO",
                            Phone = "+998 991235999",
                            RoleId = 1L,
                            UserName = "Nozimjon"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 44, 687, DateTimeKind.Utc).AddTicks(9413),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aljavhar@gmail.com",
                            FirstName = "AlJavhar",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Boyaliyev",
                            Password = "$2a$11$pFYFurB3zbilg1YjbD.X4u.VGeRqq/rn0zB8dyrv5teMc23JIar/O",
                            Phone = "+998 902344545",
                            RoleId = 4L,
                            UserName = "AlJavhar"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 0, DateTimeKind.Utc).AddTicks(1604),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "muhammad@gmail.com",
                            FirstName = "Muhammad",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Rahimboyev",
                            Password = "$2a$11$tElJSx1Y1oOb0guSCVvCVeYUFJKGGbB9fgZ5opei4K7Ohag784INa",
                            Phone = "+998 937770202",
                            RoleId = 5L,
                            UserName = "Muhammad"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 8, 25, 16, 56, 45, 0, DateTimeKind.Utc).AddTicks(1626),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "boqiyev482@gmail.com",
                            FirstName = "Bekmurod",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Boqiyev",
                            Password = "$2a$11$Hp6C0Ql1NSyzuOBTt6oAKuj36M6CpAK3rDsL6rNX1q7FKeYebaCJO",
                            Phone = "998 90 848 05 210",
                            RoleId = 2L,
                            UserName = "Bekmurodt"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Authorizations.RolePermission", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Authorizations.Permission", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Authorizations.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.CartItem", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Orders.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Feedbacks.Feedback", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Feedback")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Feedbacks.FeedbackAttachment", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Attachments.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Orders.Feedbacks.Feedback", "Feedback")
                        .WithMany("FeedbackAttachments")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Users.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Payments.Payment", "Payments")
                        .WithOne("Order")
                        .HasForeignKey("FastFood.Domain.Entities.Orders.Order", "PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Payments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.OrderAction", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderActions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Products.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Payments.Payment", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Attachments.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Users.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Products.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Authorizations.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Feedbacks.Feedback", b =>
                {
                    b.Navigation("FeedbackAttachments");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("OrderActions");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Payments.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Users.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
